/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input abuttonup,
    input abuttondown,
    input abuttonleft,
    input abuttonright,
    input bbuttonup,
    input bbuttondown,
    input bbuttonleft,
    input bbuttonright,
    input abuttonstart,
    input buttonreset,
    input buttonincrease,
    input buttonstart,
    input buttonchange,
    input buttontest,
    output reg [23:0] io_sel3,
    output reg [3:0] io_sel1,
    output reg [3:0] io_sel2
  );
  
  
  
  reg timesup;
  
  reg rst;
  
  reg [7:0] goals;
  
  reg [1:0] gamestatus;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [4-1:0] M_states_io_sel1;
  wire [4-1:0] M_states_io_sel2;
  wire [8-1:0] M_states_ascor;
  wire [8-1:0] M_states_bscor;
  wire [3-1:0] M_states_box1value;
  wire [3-1:0] M_states_box2value;
  wire [3-1:0] M_states_box3value;
  wire [3-1:0] M_states_box4value;
  reg [1-1:0] M_states_rst_n;
  reg [1-1:0] M_states_abuttonup;
  reg [1-1:0] M_states_abuttondown;
  reg [1-1:0] M_states_abuttonleft;
  reg [1-1:0] M_states_abuttonright;
  reg [1-1:0] M_states_bbuttonup;
  reg [1-1:0] M_states_bbuttondown;
  reg [1-1:0] M_states_bbuttonleft;
  reg [1-1:0] M_states_bbuttonright;
  reg [1-1:0] M_states_buttonreset;
  reg [1-1:0] M_states_buttonchange;
  reg [1-1:0] M_states_buttontest;
  reg [1-1:0] M_states_abuttonstart;
  states_2 states (
    .clk(clk),
    .rst_n(M_states_rst_n),
    .abuttonup(M_states_abuttonup),
    .abuttondown(M_states_abuttondown),
    .abuttonleft(M_states_abuttonleft),
    .abuttonright(M_states_abuttonright),
    .bbuttonup(M_states_bbuttonup),
    .bbuttondown(M_states_bbuttondown),
    .bbuttonleft(M_states_bbuttonleft),
    .bbuttonright(M_states_bbuttonright),
    .buttonreset(M_states_buttonreset),
    .buttonchange(M_states_buttonchange),
    .buttontest(M_states_buttontest),
    .abuttonstart(M_states_abuttonstart),
    .io_sel1(M_states_io_sel1),
    .io_sel2(M_states_io_sel2),
    .ascor(M_states_ascor),
    .bscor(M_states_bscor),
    .box1value(M_states_box1value),
    .box2value(M_states_box2value),
    .box3value(M_states_box3value),
    .box4value(M_states_box4value)
  );
  wire [12-1:0] M_numbergen1_four;
  reg [1-1:0] M_numbergen1_rst;
  numbergen_3 numbergen1 (
    .clk(clk),
    .rst(M_numbergen1_rst),
    .four(M_numbergen1_four)
  );
  reg [7:0] M_goal_d, M_goal_q = 8'h1f;
  reg [11:0] M_value_d, M_value_q = 1'h0;
  reg [11:0] M_valuetwo_d, M_valuetwo_q = 1'h0;
  wire [4-1:0] M_seg1_bi;
  wire [4-1:0] M_seg1_sel;
  reg [16-1:0] M_seg1_values;
  multi_seven_seg_4 seg1 (
    .clk(clk),
    .rst(rst),
    .values(M_seg1_values),
    .bi(M_seg1_bi),
    .sel(M_seg1_sel)
  );
  wire [4-1:0] M_seg2_bi;
  wire [4-1:0] M_seg2_sel;
  reg [16-1:0] M_seg2_values;
  multi_seven_seg_4 seg2 (
    .clk(clk),
    .rst(rst),
    .values(M_seg2_values),
    .bi(M_seg2_bi),
    .sel(M_seg2_sel)
  );
  wire [4-1:0] M_seg3_bi;
  wire [4-1:0] M_seg3_sel;
  reg [16-1:0] M_seg3_values;
  multi_seven_seg_4 seg3 (
    .clk(clk),
    .rst(rst),
    .values(M_seg3_values),
    .bi(M_seg3_bi),
    .sel(M_seg3_sel)
  );
  wire [4-1:0] M_seg4_bi;
  wire [4-1:0] M_seg4_sel;
  reg [16-1:0] M_seg4_values;
  multi_seven_seg_4 seg4 (
    .clk(clk),
    .rst(rst),
    .values(M_seg4_values),
    .bi(M_seg4_bi),
    .sel(M_seg4_sel)
  );
  wire [4-1:0] M_seg5_bi;
  wire [4-1:0] M_seg5_sel;
  reg [16-1:0] M_seg5_values;
  multi_seven_seg_4 seg5 (
    .clk(clk),
    .rst(rst),
    .values(M_seg5_values),
    .bi(M_seg5_bi),
    .sel(M_seg5_sel)
  );
  wire [1-1:0] M_edge_detectorincrease_out;
  reg [1-1:0] M_edge_detectorincrease_in;
  edge_detector_9 edge_detectorincrease (
    .clk(clk),
    .in(M_edge_detectorincrease_in),
    .out(M_edge_detectorincrease_out)
  );
  wire [1-1:0] M_button_condincrease_out;
  reg [1-1:0] M_button_condincrease_in;
  button_conditioner_10 button_condincrease (
    .clk(clk),
    .in(M_button_condincrease_in),
    .out(M_button_condincrease_out)
  );
  wire [1-1:0] M_edge_detectorstart_out;
  reg [1-1:0] M_edge_detectorstart_in;
  edge_detector_9 edge_detectorstart (
    .clk(clk),
    .in(M_edge_detectorstart_in),
    .out(M_edge_detectorstart_out)
  );
  wire [1-1:0] M_button_condstart_out;
  reg [1-1:0] M_button_condstart_in;
  button_conditioner_10 button_condstart (
    .clk(clk),
    .in(M_button_condstart_in),
    .out(M_button_condstart_out)
  );
  
  wire [16-1:0] M_d2B1_biny;
  reg [16-1:0] M_d2B1_dgt;
  decToBin_13 d2B1 (
    .dgt(M_d2B1_dgt),
    .biny(M_d2B1_biny)
  );
  
  wire [16-1:0] M_d2B2_biny;
  reg [16-1:0] M_d2B2_dgt;
  decToBin_13 d2B2 (
    .dgt(M_d2B2_dgt),
    .biny(M_d2B2_biny)
  );
  
  wire [16-1:0] M_d2B3_biny;
  reg [16-1:0] M_d2B3_dgt;
  decToBin_13 d2B3 (
    .dgt(M_d2B3_dgt),
    .biny(M_d2B3_biny)
  );
  
  wire [16-1:0] M_d2B4_biny;
  reg [16-1:0] M_d2B4_dgt;
  decToBin_13 d2B4 (
    .dgt(M_d2B4_dgt),
    .biny(M_d2B4_biny)
  );
  
  wire [16-1:0] M_d2B5_biny;
  reg [16-1:0] M_d2B5_dgt;
  decToBin_13 d2B5 (
    .dgt(M_d2B5_dgt),
    .biny(M_d2B5_biny)
  );
  
  wire [16-1:0] M_b2D1_digits;
  reg [14-1:0] M_b2D1_value;
  binToDec_18 b2D1 (
    .value(M_b2D1_value),
    .digits(M_b2D1_digits)
  );
  
  wire [16-1:0] M_b2D2_digits;
  reg [14-1:0] M_b2D2_value;
  binToDec_18 b2D2 (
    .value(M_b2D2_value),
    .digits(M_b2D2_digits)
  );
  
  wire [16-1:0] M_b2D3_digits;
  reg [14-1:0] M_b2D3_value;
  binToDec_18 b2D3 (
    .value(M_b2D3_value),
    .digits(M_b2D3_digits)
  );
  
  wire [16-1:0] M_b2D4_digits;
  reg [14-1:0] M_b2D4_value;
  binToDec_18 b2D4 (
    .value(M_b2D4_value),
    .digits(M_b2D4_digits)
  );
  
  wire [8-1:0] M_b2D5_digits;
  reg [7-1:0] M_b2D5_value;
  binToDectwo_22 b2D5 (
    .value(M_b2D5_value),
    .digits(M_b2D5_digits)
  );
  
  wire [8-1:0] M_b2D6_digits;
  reg [7-1:0] M_b2D6_value;
  binToDectwo_22 b2D6 (
    .value(M_b2D6_value),
    .digits(M_b2D6_digits)
  );
  
  always @* begin
    M_valuetwo_d = M_valuetwo_q;
    M_value_d = M_value_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    goals = M_goal_q;
    M_numbergen1_rst = rst;
    M_value_d = M_numbergen1_four;
    M_valuetwo_d = M_numbergen1_four;
    M_button_condincrease_in = ~buttonincrease;
    M_edge_detectorincrease_in = M_button_condincrease_out;
    M_button_condstart_in = ~abuttonstart;
    M_edge_detectorstart_in = M_button_condstart_out;
    M_states_rst_n = rst_n;
    M_states_abuttonstart = abuttonstart;
    M_states_abuttonup = abuttonup;
    M_states_buttonchange = buttonchange;
    M_states_buttontest = buttontest;
    M_states_abuttondown = abuttondown;
    M_states_abuttonleft = abuttonleft;
    M_states_abuttonright = abuttonright;
    M_states_abuttonstart = abuttonstart;
    M_states_bbuttonup = bbuttonup;
    M_states_bbuttondown = bbuttondown;
    M_states_bbuttonleft = bbuttonleft;
    M_states_bbuttonright = bbuttonright;
    io_sel1 = M_states_io_sel1;
    io_sel2 = M_states_io_sel2;
    M_states_buttonreset = buttonreset;
    M_states_buttonreset = buttonreset;
    M_b2D1_value = M_states_box1value;
    M_d2B1_dgt = M_b2D1_digits;
    M_seg1_values = M_d2B1_biny;
    io_sel3[0+3-:4] = ~M_seg1_sel;
    io_sel3[4+3-:4] = M_seg1_bi;
    M_b2D2_value = M_states_box2value;
    M_d2B2_dgt = M_b2D2_digits;
    M_seg2_values = M_d2B2_biny;
    io_sel3[0+3-:4] = ~M_seg2_sel;
    io_sel3[8+3-:4] = M_seg2_bi;
    M_b2D3_value = M_states_box3value;
    M_d2B3_dgt = M_b2D3_digits;
    M_seg3_values = M_d2B3_biny;
    io_sel3[0+3-:4] = ~M_seg3_sel;
    io_sel3[12+3-:4] = M_seg3_bi;
    M_b2D4_value = M_states_box4value;
    M_d2B4_dgt = M_b2D4_digits;
    M_seg4_values = M_d2B4_biny;
    io_sel3[0+3-:4] = ~M_seg4_sel;
    io_sel3[16+3-:4] = M_seg4_bi;
    M_b2D5_value = M_states_ascor;
    M_b2D6_value = M_states_bscor;
    M_d2B5_dgt = {M_b2D5_digits[4+3-:4], M_b2D5_digits[0+3-:4], M_b2D6_digits[4+3-:4], M_b2D6_digits[0+3-:4]};
    M_seg5_values = M_d2B5_biny;
    io_sel3[0+3-:4] = ~M_seg5_sel;
    io_sel3[20+3-:4] = M_seg5_bi;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_valuetwo_q <= 1'h0;
    end else begin
      M_valuetwo_q <= M_valuetwo_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_value_q <= 1'h0;
    end else begin
      M_value_q <= M_value_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_goal_q <= 8'h1f;
    end else begin
      M_goal_q <= M_goal_d;
    end
  end
  
endmodule
