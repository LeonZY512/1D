/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module states_2 (
    input clk,
    input rst_n,
    input abuttonup,
    input abuttondown,
    input abuttonleft,
    input abuttonright,
    input bbuttonup,
    input bbuttondown,
    input bbuttonleft,
    input bbuttonright,
    input buttonreset,
    input buttonchange,
    input buttontest,
    input abuttonstart,
    output reg [3:0] io_sel1,
    output reg [3:0] io_sel2,
    output reg [7:0] ascor,
    output reg [7:0] bscor,
    output reg [2:0] box1value,
    output reg [2:0] box2value,
    output reg [2:0] box3value,
    output reg [2:0] box4value
  );
  
  
  
  reg rst;
  
  reg [11:0] four1;
  
  reg [7:0] goal;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam IDLE_position = 5'd0;
  localparam START_position = 5'd1;
  localparam AONE_position = 5'd2;
  localparam ATWO_position = 5'd3;
  localparam ATHREE_position = 5'd4;
  localparam AFOUR_position = 5'd5;
  localparam BSTART_position = 5'd6;
  localparam BONE_position = 5'd7;
  localparam BTWO_position = 5'd8;
  localparam BTHREE_position = 5'd9;
  localparam BFOUR_position = 5'd10;
  localparam TEST1_position = 5'd11;
  localparam TEST2_position = 5'd12;
  localparam TEST3_position = 5'd13;
  localparam AWIN_position = 5'd14;
  localparam BWIN_position = 5'd15;
  localparam DRAW_position = 5'd16;
  
  reg [4:0] M_position_d, M_position_q = IDLE_position;
  wire [8-1:0] M_alucompare_alu;
  reg [6-1:0] M_alucompare_alufn;
  reg [8-1:0] M_alucompare_a;
  reg [8-1:0] M_alucompare_b;
  alu_24 alucompare (
    .clk(clk),
    .rst(rst),
    .alufn(M_alucompare_alufn),
    .a(M_alucompare_a),
    .b(M_alucompare_b),
    .alu(M_alucompare_alu)
  );
  wire [12-1:0] M_numbergen1_four;
  numbergen_3 numbergen1 (
    .clk(clk),
    .rst(rst),
    .four(M_numbergen1_four)
  );
  wire [1-1:0] M_edge_adetectorup_out;
  reg [1-1:0] M_edge_adetectorup_in;
  edge_detector_9 edge_adetectorup (
    .clk(clk),
    .in(M_edge_adetectorup_in),
    .out(M_edge_adetectorup_out)
  );
  wire [1-1:0] M_button_acondup_out;
  reg [1-1:0] M_button_acondup_in;
  button_conditioner_10 button_acondup (
    .clk(clk),
    .in(M_button_acondup_in),
    .out(M_button_acondup_out)
  );
  wire [1-1:0] M_edge_adetectordown_out;
  reg [1-1:0] M_edge_adetectordown_in;
  edge_detector_9 edge_adetectordown (
    .clk(clk),
    .in(M_edge_adetectordown_in),
    .out(M_edge_adetectordown_out)
  );
  wire [1-1:0] M_button_aconddown_out;
  reg [1-1:0] M_button_aconddown_in;
  button_conditioner_10 button_aconddown (
    .clk(clk),
    .in(M_button_aconddown_in),
    .out(M_button_aconddown_out)
  );
  wire [1-1:0] M_edge_adetectoruleft_out;
  reg [1-1:0] M_edge_adetectoruleft_in;
  edge_detector_9 edge_adetectoruleft (
    .clk(clk),
    .in(M_edge_adetectoruleft_in),
    .out(M_edge_adetectoruleft_out)
  );
  wire [1-1:0] M_button_acondleft_out;
  reg [1-1:0] M_button_acondleft_in;
  button_conditioner_10 button_acondleft (
    .clk(clk),
    .in(M_button_acondleft_in),
    .out(M_button_acondleft_out)
  );
  wire [1-1:0] M_edge_adetectorright_out;
  reg [1-1:0] M_edge_adetectorright_in;
  edge_detector_9 edge_adetectorright (
    .clk(clk),
    .in(M_edge_adetectorright_in),
    .out(M_edge_adetectorright_out)
  );
  wire [1-1:0] M_button_acondright_out;
  reg [1-1:0] M_button_acondright_in;
  button_conditioner_10 button_acondright (
    .clk(clk),
    .in(M_button_acondright_in),
    .out(M_button_acondright_out)
  );
  wire [1-1:0] M_edge_bdetectorup_out;
  reg [1-1:0] M_edge_bdetectorup_in;
  edge_detector_9 edge_bdetectorup (
    .clk(clk),
    .in(M_edge_bdetectorup_in),
    .out(M_edge_bdetectorup_out)
  );
  wire [1-1:0] M_button_bcondup_out;
  reg [1-1:0] M_button_bcondup_in;
  button_conditioner_10 button_bcondup (
    .clk(clk),
    .in(M_button_bcondup_in),
    .out(M_button_bcondup_out)
  );
  wire [1-1:0] M_edge_bdetectordown_out;
  reg [1-1:0] M_edge_bdetectordown_in;
  edge_detector_9 edge_bdetectordown (
    .clk(clk),
    .in(M_edge_bdetectordown_in),
    .out(M_edge_bdetectordown_out)
  );
  wire [1-1:0] M_button_bconddown_out;
  reg [1-1:0] M_button_bconddown_in;
  button_conditioner_10 button_bconddown (
    .clk(clk),
    .in(M_button_bconddown_in),
    .out(M_button_bconddown_out)
  );
  wire [1-1:0] M_edge_bdetectoruleft_out;
  reg [1-1:0] M_edge_bdetectoruleft_in;
  edge_detector_9 edge_bdetectoruleft (
    .clk(clk),
    .in(M_edge_bdetectoruleft_in),
    .out(M_edge_bdetectoruleft_out)
  );
  wire [1-1:0] M_button_bcondleft_out;
  reg [1-1:0] M_button_bcondleft_in;
  button_conditioner_10 button_bcondleft (
    .clk(clk),
    .in(M_button_bcondleft_in),
    .out(M_button_bcondleft_out)
  );
  wire [1-1:0] M_edge_bdetectorright_out;
  reg [1-1:0] M_edge_bdetectorright_in;
  edge_detector_9 edge_bdetectorright (
    .clk(clk),
    .in(M_edge_bdetectorright_in),
    .out(M_edge_bdetectorright_out)
  );
  wire [1-1:0] M_button_bcondright_out;
  reg [1-1:0] M_button_bcondright_in;
  button_conditioner_10 button_bcondright (
    .clk(clk),
    .in(M_button_bcondright_in),
    .out(M_button_bcondright_out)
  );
  wire [1-1:0] M_edge_detectorchange_out;
  reg [1-1:0] M_edge_detectorchange_in;
  edge_detector_9 edge_detectorchange (
    .clk(clk),
    .in(M_edge_detectorchange_in),
    .out(M_edge_detectorchange_out)
  );
  wire [1-1:0] M_button_condchange_out;
  reg [1-1:0] M_button_condchange_in;
  button_conditioner_10 button_condchange (
    .clk(clk),
    .in(M_button_condchange_in),
    .out(M_button_condchange_out)
  );
  wire [1-1:0] M_edge_detectorstart_out;
  reg [1-1:0] M_edge_detectorstart_in;
  edge_detector_9 edge_detectorstart (
    .clk(clk),
    .in(M_edge_detectorstart_in),
    .out(M_edge_detectorstart_out)
  );
  wire [1-1:0] M_button_condstart_out;
  reg [1-1:0] M_button_condstart_in;
  button_conditioner_10 button_condstart (
    .clk(clk),
    .in(M_button_condstart_in),
    .out(M_button_condstart_out)
  );
  wire [1-1:0] M_edge_detectorreset_out;
  reg [1-1:0] M_edge_detectorreset_in;
  edge_detector_9 edge_detectorreset (
    .clk(clk),
    .in(M_edge_detectorreset_in),
    .out(M_edge_detectorreset_out)
  );
  wire [1-1:0] M_button_condreset_out;
  reg [1-1:0] M_button_condreset_in;
  button_conditioner_10 button_condreset (
    .clk(clk),
    .in(M_button_condreset_in),
    .out(M_button_condreset_out)
  );
  wire [1-1:0] M_edge_detectortest_out;
  reg [1-1:0] M_edge_detectortest_in;
  edge_detector_9 edge_detectortest (
    .clk(clk),
    .in(M_edge_detectortest_in),
    .out(M_edge_detectortest_out)
  );
  wire [1-1:0] M_button_condtest_out;
  reg [1-1:0] M_button_condtest_in;
  button_conditioner_10 button_condtest (
    .clk(clk),
    .in(M_button_condtest_in),
    .out(M_button_condtest_out)
  );
  reg [11:0] M_value_d, M_value_q = 1'h0;
  reg [7:0] M_ascore_d, M_ascore_q = 8'h00;
  reg [7:0] M_bscore_d, M_bscore_q = 8'h00;
  
  always @* begin
    M_position_d = M_position_q;
    M_value_d = M_value_q;
    M_bscore_d = M_bscore_q;
    M_ascore_d = M_ascore_q;
    
    if (M_edge_detectorreset_out) begin
      M_position_d = IDLE_position;
    end
    goal = 8'h20;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    four1 = M_numbergen1_four;
    M_ascore_d = M_ascore_q;
    M_bscore_d = M_bscore_q;
    ascor = M_ascore_q;
    bscor = M_bscore_q;
    M_value_d = M_value_q;
    M_alucompare_alufn[0+5-:6] = 1'h0;
    M_alucompare_a = 1'h0;
    M_alucompare_b = 1'h0;
    box1value = M_value_q[0+0+2-:3];
    box2value = M_value_q[3+0+2-:3];
    box3value = M_value_q[6+0+2-:3];
    box4value = M_value_q[9+0+2-:3];
    io_sel1 = 4'h0;
    io_sel2 = 4'h0;
    M_button_acondup_in = ~abuttonup;
    M_button_aconddown_in = ~abuttondown;
    M_button_acondleft_in = ~abuttonleft;
    M_button_acondright_in = ~abuttonright;
    M_button_condstart_in = ~abuttonstart;
    M_button_condtest_in = ~buttontest;
    M_button_condreset_in = ~buttonreset;
    M_edge_adetectorup_in = M_button_acondup_out;
    M_edge_adetectordown_in = M_button_aconddown_out;
    M_edge_adetectoruleft_in = M_button_acondleft_out;
    M_edge_adetectorright_in = M_button_acondright_out;
    M_edge_detectorstart_in = M_button_condstart_out;
    M_edge_detectorreset_in = M_button_condreset_out;
    M_edge_detectortest_in = M_button_condtest_out;
    M_button_bcondup_in = ~bbuttonup;
    M_button_bconddown_in = ~bbuttondown;
    M_button_bcondleft_in = ~bbuttonleft;
    M_button_bcondright_in = ~bbuttonright;
    M_button_condchange_in = ~buttonchange;
    M_edge_bdetectorup_in = M_button_bcondup_out;
    M_edge_bdetectordown_in = M_button_bconddown_out;
    M_edge_bdetectoruleft_in = M_button_bcondleft_out;
    M_edge_bdetectorright_in = M_button_bcondright_out;
    M_edge_detectorchange_in = M_button_condchange_out;
    
    case (M_position_q)
      IDLE_position: begin
        M_value_d = M_numbergen1_four;
        if (M_edge_detectorstart_out) begin
          M_position_d = START_position;
        end
      end
      START_position: begin
        M_value_d = M_numbergen1_four;
        box1value = M_value_q[0+0+2-:3];
        box2value = M_value_q[3+0+2-:3];
        box3value = M_value_q[6+0+2-:3];
        box4value = M_value_q[9+0+2-:3];
        M_position_d = AONE_position;
      end
      AONE_position: begin
        io_sel1[0+0-:1] = 1'h1;
        if (M_edge_adetectorup_out) begin
          M_position_d = ATHREE_position;
          M_ascore_d = M_ascore_q + M_value_q[6+0+2-:3];
          M_value_d[6+0+2-:3] = M_value_q[6+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectorright_out) begin
          M_position_d = ATWO_position;
          M_ascore_d = M_ascore_q + M_value_q[3+0+2-:3];
          M_value_d[3+0+2-:3] = M_value_q[3+0+2-:3] + 1'h1;
        end
        if (M_edge_detectorchange_out) begin
          M_position_d = BSTART_position;
        end
      end
      ATWO_position: begin
        io_sel1[1+0-:1] = 1'h1;
        if (M_edge_adetectoruleft_out) begin
          M_position_d = AONE_position;
          M_ascore_d = M_ascore_q + M_value_q[0+0+2-:3];
          M_value_d[0+0+2-:3] = M_value_q[0+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectorup_out) begin
          M_position_d = AFOUR_position;
          M_ascore_d = M_ascore_q + M_value_q[9+0+2-:3];
          M_value_d[9+0+2-:3] = M_value_q[9+0+2-:3] + 1'h1;
        end
        if (M_edge_detectorchange_out) begin
          M_position_d = BSTART_position;
        end
      end
      ATHREE_position: begin
        io_sel1[2+0-:1] = 1'h1;
        if (M_edge_adetectorright_out) begin
          M_position_d = AFOUR_position;
          M_ascore_d = M_ascore_q + M_value_q[9+0+2-:3];
          M_value_d[9+0+2-:3] = M_value_q[9+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectordown_out) begin
          M_position_d = AONE_position;
          M_ascore_d = M_ascore_q + M_value_q[0+0+2-:3];
          M_value_d[0+0+2-:3] = M_value_q[0+0+2-:3] + 1'h1;
        end
        if (M_edge_detectorchange_out) begin
          M_position_d = BSTART_position;
        end
      end
      AFOUR_position: begin
        io_sel1[3+0-:1] = 1'h1;
        if (M_edge_adetectoruleft_out) begin
          M_position_d = ATHREE_position;
          M_ascore_d = M_ascore_q + M_value_q[6+0+2-:3];
          M_value_d[6+0+2-:3] = M_value_q[6+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectordown_out) begin
          M_position_d = ATWO_position;
          M_ascore_d = M_ascore_q + M_value_q[3+0+2-:3];
          M_value_d[3+0+2-:3] = M_value_q[3+0+2-:3] + 1'h1;
        end
        if (M_edge_detectorchange_out) begin
          M_position_d = START_position;
        end
      end
      BSTART_position: begin
        M_value_d = M_value_q;
        bscor = M_bscore_q;
        M_position_d = BONE_position;
      end
      BONE_position: begin
        io_sel2[0+0-:1] = 1'h1;
        if (M_edge_adetectorup_out) begin
          M_position_d = BTHREE_position;
          M_bscore_d = M_bscore_q + M_value_q[6+0+2-:3];
          M_value_d[6+0+2-:3] = M_value_q[6+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectorright_out) begin
          M_position_d = BTWO_position;
          M_bscore_d = M_bscore_q + M_value_q[3+0+2-:3];
          M_value_d[3+0+2-:3] = M_value_q[3+0+2-:3] + 1'h1;
        end
        if (M_edge_detectortest_out) begin
          M_position_d = TEST1_position;
        end
      end
      BTWO_position: begin
        io_sel2[1+0-:1] = 1'h1;
        if (M_edge_adetectoruleft_out) begin
          M_position_d = BONE_position;
          M_bscore_d = M_bscore_q + M_value_q[9+0+2-:3];
          M_value_d[0+0+2-:3] = M_value_q[0+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectorup_out) begin
          M_position_d = BFOUR_position;
          M_bscore_d = M_bscore_q + M_value_q[6+0+2-:3];
          M_value_d[9+0+2-:3] = M_value_q[9+0+2-:3] + 1'h1;
        end
        if (M_edge_detectortest_out) begin
          M_position_d = TEST1_position;
        end
      end
      BTHREE_position: begin
        io_sel2[2+0-:1] = 1'h1;
        if (M_edge_adetectorright_out) begin
          M_position_d = BFOUR_position;
          M_bscore_d = M_bscore_q + M_value_q[9+0+2-:3];
          M_value_d[9+0+2-:3] = M_value_q[9+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectordown_out) begin
          M_position_d = BONE_position;
          M_bscore_d = M_bscore_q + M_value_q[0+0+2-:3];
          M_value_d[0+0+2-:3] = M_value_q[0+0+2-:3] + 1'h1;
        end
        if (M_edge_detectortest_out) begin
          M_position_d = TEST1_position;
        end
      end
      BFOUR_position: begin
        io_sel2[3+0-:1] = 1'h1;
        if (M_edge_adetectoruleft_out) begin
          M_position_d = BTHREE_position;
          M_bscore_d = M_bscore_q + M_value_q[6+0+2-:3];
          M_value_d[6+0+2-:3] = M_value_q[6+0+2-:3] + 1'h1;
        end
        if (M_edge_adetectordown_out) begin
          M_position_d = BTWO_position;
          M_bscore_d = M_bscore_q + M_value_q[3+0+2-:3];
          M_value_d[3+0+2-:3] = M_value_q[3+0+2-:3] + 1'h1;
        end
        if (M_edge_detectortest_out) begin
          M_position_d = TEST1_position;
        end
      end
      TEST1_position: begin
        M_alucompare_a = M_ascore_q;
        M_alucompare_b = M_bscore_q;
        M_alucompare_alufn = 6'h33;
        if (M_alucompare_alu[0+0-:1] == 1'h1) begin
          M_position_d = DRAW_position;
        end
        if (M_alucompare_alu[0+0-:1] == 1'h0) begin
          M_position_d = TEST2_position;
        end
      end
      TEST2_position: begin
        M_alucompare_a = M_ascore_q;
        M_alucompare_b = M_bscore_q;
        M_alucompare_alufn = 6'h35;
        if (M_alucompare_alu[0+0-:1] == 1'h1 && M_bscore_q < 8'h3f) begin
          M_position_d = BWIN_position;
        end else begin
          M_position_d = TEST3_position;
        end
      end
      TEST3_position: begin
        M_alucompare_b = M_ascore_q;
        M_alucompare_a = M_bscore_q;
        M_alucompare_alufn = 6'h35;
        if (M_alucompare_alu[0+0-:1] == 1'h1 && M_ascore_q < 8'h3f) begin
          M_position_d = AWIN_position;
        end
      end
      DRAW_position: begin
        io_sel1[0+3-:4] = 4'hf;
        io_sel2[0+3-:4] = 4'hf;
      end
      AWIN_position: begin
        io_sel1[0+3-:4] = 4'hf;
        io_sel2[0+3-:4] = 4'h0;
      end
      BWIN_position: begin
        io_sel2[0+3-:4] = 4'hf;
        io_sel1[0+3-:4] = 4'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_position_q <= 1'h0;
    end else begin
      M_position_q <= M_position_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ascore_q <= 8'h00;
    end else begin
      M_ascore_q <= M_ascore_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_bscore_q <= 8'h00;
    end else begin
      M_bscore_q <= M_bscore_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_value_q <= 1'h0;
    end else begin
      M_value_q <= M_value_d;
    end
  end
  
endmodule
