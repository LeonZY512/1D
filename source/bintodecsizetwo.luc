// modified from MIT bin_to_dec components

/* Binary to Decimal: This module takes a binary number and splits it into
   base 10 decimal digits. The maximum number of digits is specified by the
   parameter DIGITS. If LEADING_ZEROS is 0, leading zeros will have the value
   of 10. If it is 1, they will be regular 0's. If the input value is too large
   for a decimal number of DIGITS digits, all digits will have the value 11. */

module binToDectwo #(
    DIGITS = 2 : DIGITS > 0, // maximum 255
    LEADING_ZEROS = 0 : LEADING_ZEROS == 0 || LEADING_ZEROS == 1
  )(
    input value[$clog2($pow(10, DIGITS))],            // minimum number of bits for DIGITS 
    output digits[DIGITS][4]                          // decimal output
  ) {
  
  var i, j, scale;
  sig remainder[value.WIDTH];                         // running remainder
  sig sub_value[value.WIDTH];                         // temporary subtraction value
  sig blank;                                          // flag for leading zeros
  
  always {
    for (i = 0; i < DIGITS; i++)                      // for all digits
      digits[i] = d11;                                // default to invalid number
    
    remainder = value;                                // initialize remainder
    blank = !LEADING_ZEROS;                           // set blank zero flag
    
    if (value < $pow(10, DIGITS)) {                   // if can be displayed
      for (j = DIGITS - 1; j >= $signed(0); j--) {    // for each digit
        scale = $pow(10, j);                          // get the scale for the digit
        
        if (remainder < scale) {                      // if this digit is 0
          if (j != 0 && blank)                        // use 10 for blank
            digits[j] = 10;
          else                                        // or 0 for zero
            digits[j] = 0;
        } else {                                      // digit is 1-9
          blank = 0;                                  // don't blank future zeros
          sub_value = 0;                              // default to no subtraction
          for (i = 9; i >= 1; i--) {                  // for each possible value (starting from 9)
            if (remainder < (i+1) * scale) {          // if remainder is less than value
              digits[j] = i;                          // set digit to this value
              sub_value = i * scale;                  // set subtraction value
            }
          }
          remainder = remainder - sub_value;          // subtract off last digit
        }
      }
    }
  }
}